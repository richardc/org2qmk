#+title: org2qmk_keymap

ergodone/ergodox-ez layout

* Idea
As I was starting to hacking on a qmk keymap for an ergodone, anticipating that I'd
later have to port it for the ergodox-ez, keymap.c to lay it out, it
occured to me that I could use org-mode's table mode, and then
translate it to C.

There's no special syntax, outside of the handling of tables and
headers.

Headers that describe a layout should declare the ~LAYOUT~ property in
their property drawer.  This sets up the keymaps definition in the
output.

~begin_src c~ blocks are tangled verbatim, so you can keep your own
handlers alongside your layer definitions.

Tables are translated left to right, top to bottom to generate an
array.  The code will map user-readable key names into the keycodes
that QMK defines.  Any not recognised will be copied verbatim, so you
can still add custom keys or keys I didn't bother to translate yet.

Blank cells are skippedn, so you'll want to make use of ~noop~ and
~""~ to ensure your keymap is filled with the appropriate ~KC_NO~ and
~KC_TRANS~ values keys for keys you don't want to specify the
behaviour of.

This should hopefully still be far simpler to manage steps than
planning the keys, then counting symbols into the keymap.


* Usage
See the generated code:

#+BEGIN_SRC shell :tangle run.sh
#!/bin/sh
go run . examples/ergodone_default.org ergodone
#+END_SRC

A full compile cycle looks like this (assuming qmk in ~/src/qmk_firmware)
#+begin_src shell :tangle compile.sh
#!/bin/sh
set -x
go run . examples/ergodone_default.org ergodone > $HOME/src/qmk_firmware/keyboards/ergodone/keymaps/$(whoami)/keymap.c
cd $HOME/src/qmk_firmware
make ergodone:$(whoami)
#+end_src

* Examples
[[https://github.com/qmk/qmk_firmware/blob/0.8.116/keyboards/ergodone/keymaps/default/keymap.c][ergodone:default]] expressed using this tool in [[./examples/ergodone_default.org]]

A [[./examples/ergodone_blank.org][blank layer]] for use with an ergodone.
